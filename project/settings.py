"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import base64
import binascii
import io
import json
import os
from pathlib import Path

import environ
import google.auth
from decouple import config, Csv
from django.utils.translation import gettext_lazy as _
from google.api_core.exceptions import PermissionDenied
from google.auth.exceptions import DefaultCredentialsError
from google.cloud import secretmanager
from google.oauth2 import service_account

from apps.modules.manifest import get_modules

# ================================================= SYSTEM =============================================================
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ============================================= APPLICATION SECURITY ===================================================
# SECURITY WARNING: keep the secret key used in production secret!
DEBUG = config("DEBUG", cast=bool)
SETTINGS_NAME = config("SETTINGS_NAME", "django_settings")
ALLOWED_HOSTS = config("ALLOWED_HOSTS", cast=Csv())

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", 'django-insecure-bh)8k0mqj%i5mq9q#t@7xv&@bz5hac+(1b-*4x($hz45mq13ku')

# =============================================== DJANGO APPS ==========================================================
# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    # postgres
    'django.contrib.postgres',
]
LOCAL_APPS = [
    'apps.home',
    'apps.users',
]
THIRD_PARTY_APPS = [
    # Import and Export Resource
    'import_export',

    # Healthcheck
    'health_check',  # required
    'health_check.db',  # stock Django health checkers
    'health_check.cache',
    # 'health_check.storage',
    'health_check.contrib.migrations',
    # 'health_check.contrib.celery',  # requires celery
    # 'health_check.contrib.celery_ping',  # requires celery
    'health_check.contrib.psutil',  # disk and memory utilization; requires psutil
    # 'health_check.contrib.s3boto3_storage',     # requires boto3 and S3BotoStorage backend
    'health_check.contrib.redis',  # requires Redis broker

    # Django extensions
    'django_extensions',

    # storage
    'storages',

    # Bootstrap4
    'bootstrap4',

    # Rest framework
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',

    # Rest Auth
    #'rest_auth',
    #'rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    # Rest API Doc
    'drf_spectacular',
]
MODULES_APPS = get_modules()

INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_PARTY_APPS + MODULES_APPS

# ============================================== WEB APPLICATION =======================================================
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

MIDDLEWARE += ['whitenoise.middleware.WhiteNoiseMiddleware']

SITE_ID = 1

ROOT_URLCONF = 'project.urls'
WSGI_APPLICATION = 'project.wsgi.application'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'apps'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = '/mediafiles/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')

CORS_ORIGIN_ALLOW_ALL = config('CORS_ORIGIN_ALLOW_ALL', cast=bool, default=True)
if CORS_ORIGIN_ALLOW_ALL is False:
    CORS_ORIGIN_WHITELIST = config('CORS_ORIGIN_WHITELIST', cast=lambda v: [s.strip() for s in v.split(',')])

# ================================================== SECURITY ==========================================================
# Increase value according to doc: https://docs.djangoproject.com/en/4.1/ref/middleware/#http-strict-transport-security
# Once you confirm that all assets are served securely on your site (i.e. HSTS didn’t break anything), it’s a good idea
# to increase this value so that infrequent visitors will be protected (31536000 seconds, i.e. 1 year, is common).

if DEBUG:
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

SECURE_HSTS_SECONDS = 0 if DEBUG else 3600
SECURE_HSTS_INCLUDE_SUBDOMAINS = DEBUG is False
SECURE_SSL_REDIRECT = DEBUG is False
SESSION_COOKIE_SECURE = DEBUG is False
CSRF_COOKIE_SECURE = DEBUG is False
SECURE_HSTS_PRELOAD = DEBUG is False

# ================================================= DATABASES ==========================================================
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": config("DB_DEFAULT_HOST", "postgres"),
        "NAME": config("DB_DEFAULT_NAME", "db"),
        "USER": config("DB_DEFAULT_USER", "postgres"),
        "PASSWORD": config("DB_DEFAULT_PWD", "postgres"),
        "PORT": config("DB_DEFAULT_PORT", cast=int, default=5432),
        "ATOMIC_REQUESTS": True,
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# =============================================== AUTH SECURITY ========================================================
# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Custom user model
AUTH_USER_MODEL = "users.User"

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend'
)

# allauth / users
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "optional"
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_UNIQUE_EMAIL = True
LOGIN_REDIRECT_URL = "users:redirect"

ACCOUNT_ADAPTER = "apps.users.adapters.AccountAdapter"
SOCIALACCOUNT_ADAPTER = "apps.users.adapters.SocialAccountAdapter"
ACCOUNT_ALLOW_REGISTRATION = config("ACCOUNT_ALLOW_REGISTRATION", cast=bool, default=True)
SOCIALACCOUNT_ALLOW_REGISTRATION = config("SOCIALACCOUNT_ALLOW_REGISTRATION", cast=bool, default=True)

#REST_AUTH_SERIALIZERS = {
#    # Replace password reset serializer to fix 500 error
#    "PASSWORD_RESET_SERIALIZER": "home.api.v1.serializers.PasswordSerializer",
#}
#REST_AUTH_REGISTER_SERIALIZERS = {
#    # Use custom serializer that has no username and matches web signup
#    "REGISTER_SERIALIZER": "home.api.v1.serializers.SignupSerializer",
#}

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}
# ========================================= INTERNATIONALIZATION / DATETIME ============================================
# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGES = (
    ('en-us', _('English (US)')),
    # ('pt-br', _('Português (Brasil)')),
)

LANGUAGE_CODE = config('LANGUAGE_CODE', 'en-us')
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
    os.path.join(BASE_DIR, 'core', 'locale'),
    os.path.join(BASE_DIR, 'apps', 'stock', 'locale'),
]

# ===================================================== FIXTURES / SEEDS ===============================================
FIXTURE_DIRS = [
    os.path.join(BASE_DIR, 'project', 'fixtures'),
]

# ======================================================== HEALTHCHECK =================================================
HEALTH_CHECK = {
    'DISK_USAGE_MAX': 90,  # percent
    'MEMORY_MIN': 100,  # in MB
}

# ======================================================== E-MAIL ==================================================== #
EMAIL_BACKEND = config('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = config('EMAIL_HOST', 'mailhog')
EMAIL_PORT = config('EMAIL_PORT', cast=int, default=1025)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', '')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool, default=False)

# =========================================================== BROKER ===================================================
REDIS_SSL = config('REDIS_SSL', cast=bool, default=False)
REDIS_HOST = config('REDIS_HOST', 'redis')
REDIS_USERNAME = config('REDIS_USERNAME', default='')
REDIS_PORT = config('REDIS_PORT', cast=int, default=6379)

BROKER_REDIS_BASE_URL = 'rediss' if REDIS_SSL else 'redis'
BROKER_REDIS_BASE_URL += f"://{REDIS_USERNAME + '@' if REDIS_USERNAME else ''}"
BROKER_REDIS_BASE_URL += f"{REDIS_HOST}:{REDIS_PORT}"
BROKER_REDIS_BASE_URL += "/{}"

if REDIS_SSL is True:
    BROKER_REDIS_BASE_URL += '?ssl_cert_reqs=required'

# DB 0 will be used for cache
REDIS_URL = BROKER_REDIS_BASE_URL.format(0)  # Redis - Channel 0
# ============================================================ CACHE ===================================================
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_URL,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient'
        },
        'KEY_PREFIX': 'django_orm'
    }
}

# =========================================================== AWS ======================================================
# AWS S3 config
AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID", "")
AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY", "")
AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME", "")
AWS_STORAGE_REGION = config("AWS_STORAGE_REGION", "")

USE_S3 = (
        AWS_ACCESS_KEY_ID and
        AWS_SECRET_ACCESS_KEY and
        AWS_STORAGE_BUCKET_NAME and
        AWS_STORAGE_REGION
)

if USE_S3:
    AWS_S3_CUSTOM_DOMAIN = config("AWS_S3_CUSTOM_DOMAIN", "")
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    AWS_DEFAULT_ACL = config("AWS_DEFAULT_ACL", "public-read")
    AWS_MEDIA_LOCATION = config("AWS_MEDIA_LOCATION", "media")
    AWS_AUTO_CREATE_BUCKET = config("AWS_AUTO_CREATE_BUCKET", True)
    DEFAULT_FILE_STORAGE = config(
        "DEFAULT_FILE_STORAGE", "apps.home.storage_backends.MediaStorage"
    )

# ====================================================== REST API / DOCS ===============================================
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    # 'DEFAULT_PERMISSION_CLASSES': [
    #    'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    # ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 50
}

SPECTACULAR_SETTINGS = {
    # available SwaggerUI configuration parameters
    # https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": True,
    },
    "SERVE_PERMISSIONS": ["rest_framework.permissions.IsAuthenticated"], \
    "TITLE": "project API",
    "DESCRIPTION": "API documentation for project App",
    "VERSION": "v1",
}


# GCP config 
def google_service_account_config():
    # base64 encoded service_account.json file
    service_account_config = config("GS_CREDENTIALS", "")
    if not service_account_config:
        return {}
    try:
        return json.loads(base64.b64decode(service_account_config))
    except (binascii.Error, ValueError):
        return {}


# ========================================================= GOOGLE =====================================================
try:
    # Pull secrets from Secret Manager
    _, project = google.auth.default()
    client = secretmanager.SecretManagerServiceClient()
    name = client.secret_version_path(project, SETTINGS_NAME, "latest")
    payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")
    config(io.StringIO(payload))

    env = environ.Env()
    env.read_env(io.StringIO(payload))

except (DefaultCredentialsError, PermissionDenied):
    pass

GOOGLE_SERVICE_ACCOUNT_CONFIG = google_service_account_config()
if GOOGLE_SERVICE_ACCOUNT_CONFIG:
    GS_CREDENTIALS = service_account.Credentials.from_service_account_info(GOOGLE_SERVICE_ACCOUNT_CONFIG)
GS_BUCKET_NAME = config("GS_BUCKET_NAME", "")
if GS_BUCKET_NAME:
    DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
    STATICFILES_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
    GS_DEFAULT_ACL = "publicRead"
